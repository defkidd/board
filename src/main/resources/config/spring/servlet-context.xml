<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 한글번역해보기 -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- DispatcherServlet Context: 이 서블릿의 요청-프로세싱의 인프라를 정의한다? -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- Spring MVC @Controller 프로그래밍 모델을 활성화한다.-->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- ${webappRoot}/resources 디렉토리의 정적 리소스를 효율적으로 제공하여 /resources/**에 대한 HTTP GET 요청을 처리합니다. -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 별명의 느낌 -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- Resolves views selected / for rendering /by @Controllers/ to .jsp resources in the /WEB-INF/views directory -->
	<!-- /WEB-INF/views 디렉토리의 .jsp 리소스에 렌더링하기 위해 @Controllers가 선택한 보기를 해결합니다.  -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	    <beans:property name="order" value="2" />
		
	</beans:bean>
	
	
	<!-- tiles view Resolver 설정 -->
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
	    <beans:property name="order" value="1" />
	</beans:bean>
	 
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	    <beans:property name="definitions" value="classpath:config/spring/tiles-define.xml"/>
	</beans:bean>

	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
	</beans:bean>
	
	<!-- 꼭 필요한 건 아닌 데 이런 것도 Bean이 된다는 걸 확인 차원에서 -->
    <beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="C:\workspace-sts-3.9.14\MySec\src\main\webapp\resources\ckUpload"/>
	</beans:bean>
	
	<!--  인터셉터 등록법 , 보이는 대로 의미 파악  -->
<!-- 	<interceptors> -->
<!-- 		<interceptor> -->
<!-- 			<mapping path="/user/login"/> -->
<!-- 			<beans:bean   class="kr.or.basic.interceptor.MyFirstInterceptor"/> -->
<!-- 		</interceptor> -->
<!-- 	</interceptors> -->
	

	<!-- 설정파일 읽어오기  -->
	
	
	<!-- base-package 하위의 모든 클래스들을 bean으로 등록하낟 -->
	
<!-- 	<context:component-scan base-package="kr.or.defkid" /> -->
<!-- 	보통 컨트롤러만 스캔한다 -->
	<context:component-scan base-package="kr.or.defkid.controller" />
	
	
	
	
	
</beans:beans>
